/* 
  ‡πÑ‡∏ü‡∏•‡πå: resources/js/composables/useOrganizationalRiskData.ts
  ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: Composable function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
  ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡πÅ‡∏¢‡∏Å‡πÇ‡∏•‡∏à‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å component ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
  ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö: OrganizationalRiskController.php ‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á Backend
*/

import { ref, onMounted, watch } from 'vue';
import { router, usePage } from '@inertiajs/vue3';
import { toast } from 'vue-sonner';
import { CheckCircle2Icon, FileIcon, FileTextIcon, ImageIcon, FileSpreadsheetIcon } from 'lucide-vue-next';
import type { OrganizationalRisk, Attachment } from '@/types/types';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô composable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£
export function useOrganizationalRiskData(initialRisks: OrganizationalRisk[], triggerProp?: any) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á reactive references ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const data = ref<OrganizationalRisk[]>([]);
    const existingAttachments = ref<Attachment[]>([]);
    const attachmentsToDelete = ref<number[]>([]);
    const selectedFiles = ref<File[]>([]);
    const fileNames = ref<string[]>([]);
    
    // ‡πÉ‡∏ä‡πâ usePage hook ‡∏Ç‡∏≠‡∏á Inertia ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å props
    const page = usePage();

    // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å mount
    onMounted(() => {
        loadData();
    });
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ triggerProp ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ watch ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (triggerProp !== undefined) {
        watch(() => triggerProp, () => {
            loadData();
        }, { deep: true });
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const loadData = () => {
        if (initialRisks && initialRisks.length > 0) {
            data.value = [...initialRisks];
        } else if (page.props.risks) {
            data.value = [...page.props.risks as OrganizationalRisk[]];
        } else {
            console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á props ‡πÅ‡∏•‡∏∞ Inertia page');
            data.value = [];
        }
        
        console.log('üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
            count: data.value.length,
            source: initialRisks && initialRisks.length > 0 ? 'initialRisks' : 'page.props',
            timestamp: new Date().toLocaleString('th-TH')
        });
    };
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    const loadAttachments = (risk?: OrganizationalRisk) => {
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
        attachmentsToDelete.value = [];
        selectedFiles.value = [];
        fileNames.value = [];
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
        if (risk?.attachments) {
            existingAttachments.value = [...risk.attachments];
            console.log('üìÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
                count: existingAttachments.value.length,
                risk_id: risk.id,
                risk_name: risk.risk_name
            });
        } else {
            existingAttachments.value = [];
        }
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const createFormData = (
        formData: { risk_name: string; description: string; },
        files?: File[],
        attachmentsToDelete?: number[]
    ) => {
        const form = new FormData();

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if (formData.risk_name) form.append('risk_name', formData.risk_name);
        if (formData.description) form.append('description', formData.description);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (files && files.length > 0) {
            files.forEach((file, index) => {
                if (file instanceof File) {
                    form.append(`attachments[${index}]`, file);
                    console.log(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå ${file.name} ‡∏Ç‡∏ô‡∏≤‡∏î ${formatFileSize(file.size)}`);
                }
            });
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        if (attachmentsToDelete && attachmentsToDelete.length > 0) {
            attachmentsToDelete.forEach(id => {
                form.append('attachments_to_delete[]', id.toString());
            });
        }
        
        return form;
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
    const submitForm = async (
        formData: { risk_name: string; description: string; },
        riskId?: number,
        onSuccess?: () => void
    ) => {
        const form = createFormData(
            formData,
            selectedFiles.value,
            attachmentsToDelete.value
        );

        console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á:', {
            mode: riskId ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà',
            riskId,
            hasAttachments: selectedFiles.value.length > 0,
            attachmentsToDelete: attachmentsToDelete.value.length
        });

        return new Promise((resolve, reject) => {
            if (riskId) {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                router.put(route('organizational-risks.update', riskId), form, {
                    forceFormData: true,
                    preserveState: false,
                    onSuccess: (page) => {
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô data array
                        const index = data.value.findIndex(item => item.id === riskId);
                        if (index !== -1) {
                            data.value[index] = { 
                                ...data.value[index], 
                                risk_name: formData.risk_name,
                                description: formData.description,
                            };
                            data.value = [...data.value];
                        }
                        
                        toast.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
                            icon: CheckCircle2Icon,
                            description: `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á "${formData.risk_name}" ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
                        });
                        
                        resetAttachmentState();
                        if (onSuccess) onSuccess();
                        resolve(page);
                    },
                    onError: (errors) => {
                        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÑ‡∏î‡πâ:', errors);
                        reject(errors);
                    }
                });
            } else {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                router.post('/organizational-risks', form, {
                    forceFormData: true,
                    onSuccess: (page) => {
                        if (page.props.risk && typeof page.props.risk === 'object' && 'id' in page.props.risk) {
                            const newRisk = page.props.risk as OrganizationalRisk;
                            data.value.push(newRisk);
                            data.value = [...data.value];
                        }
                        
                        toast.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
                            icon: CheckCircle2Icon,
                            description: `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á "${formData.risk_name}" ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
                        });
                        
                        resetAttachmentState();
                        if (onSuccess) onSuccess();
                        resolve(page);
                    },
                    onError: (errors) => {
                        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÑ‡∏î‡πâ:', errors);
                        reject(errors);
                    }
                });
            }
        });
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    const deleteRisk = async (risk: OrganizationalRisk): Promise<void> => {
        if (!risk || !risk.id) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
        }
        
        return new Promise((resolve, reject) => {
            router.delete(route('organizational-risks.destroy', risk.id), {
                preserveScroll: true,
                onSuccess: () => {
                    data.value = data.value.filter(item => item.id !== risk.id);
                    toast.success('‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                    
                    console.log('‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
                        risk: risk.risk_name,
                        id: risk.id
                    });
                    
                    resolve();
                },
                onError: (errors) => {
                    if (errors.error) toast.error(errors.error);
                    else toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                    
                    reject(errors);
                }
            });
        });
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const bulkDeleteRisks = async (riskIds: number[]): Promise<void> => {
        if (!riskIds || riskIds.length === 0) {
            throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
        }
        
        return new Promise((resolve, reject) => {
            router.delete('/organizational-risks/bulk-destroy', {
                data: { ids: riskIds },
                preserveScroll: true,
                onSuccess: () => {
                    data.value = data.value.filter(item => !riskIds.includes(item.id));
                    toast.success(`‡∏•‡∏ö ${riskIds.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
                    resolve();
                },
                onError: (errors) => {
                    if (errors.error) toast.error(errors.error);
                    else toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
                    reject(errors);
                }
            });
        });
    };

    // ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö ==========
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
    const resetAttachmentState = () => {
        selectedFiles.value = [];
        fileNames.value = [];
        attachmentsToDelete.value = [];
        existingAttachments.value = [];
    };
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const addSelectedFiles = (files: FileList | null) => {
        if (!files || files.length === 0) return;
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            selectedFiles.value.push(file);
            fileNames.value.push(file.name);
        }
        
        console.log('üìÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:', {
            count: files.length,
            total: selectedFiles.value.length
        });
    };
    
    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const removeSelectedFile = (index: number) => {
        if (index < 0 || index >= selectedFiles.value.length) {
            console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
            return;
        }
        
        const removedFile = selectedFiles.value[index];
        
        const newSelectedFiles: File[] = [];
        const newFileNames: string[] = [];
        
        for (let i = 0; i < selectedFiles.value.length; i++) {
            if (i !== index) {
                newSelectedFiles.push(selectedFiles.value[i]);
                newFileNames.push(fileNames.value[i]);
            }
        }
        
        selectedFiles.value = newSelectedFiles;
        fileNames.value = newFileNames;
    };
    
    // ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö
    const markAttachmentForDeletion = (attachmentId: number) => {
        if (!attachmentId) return;
        
        attachmentsToDelete.value.push(attachmentId);
        
        existingAttachments.value = existingAttachments.value.filter(
            attachment => !attachmentsToDelete.value.includes(attachment.id)
        );
        
        toast.success('‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    };

    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
    const openAttachment = (url: string) => {
        if (!url) return;
        window.open(url, '_blank');
    };
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
    const validateFiles = (files: File[]): { valid: boolean; errors: string[] } => {
        const errors: string[] = [];
        const allowedFileTypes = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png'];
        const maxSize = 10 * 1024 * 1024; // 10MB
        
        for (const file of files) {
            const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();
            
            if (!allowedFileTypes.includes(fileExtension)) {
                errors.push(`‡πÑ‡∏ü‡∏•‡πå "${file.name}" ‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö pdf, word, excel, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)`);
                continue;
            }
            
            if (file.size > maxSize) {
                errors.push(`‡πÑ‡∏ü‡∏•‡πå "${file.name}" ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB)`);
            }
        }
        
        return {
            valid: errors.length === 0,
            errors
        };
    };
    
    // ‡∏î‡∏∂‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    const getFileIcon = (fileName: string) => {
        if (!fileName) return FileIcon;
        
        const extension = fileName.split('.').pop()?.toLowerCase();
        
        switch (extension) {
            case 'pdf':
                return FileTextIcon;
            case 'doc':
            case 'docx':
                return FileTextIcon;
            case 'xls':
            case 'xlsx':
                return FileSpreadsheetIcon;
            case 'jpg':
            case 'jpeg':
            case 'png':
                return ImageIcon;
            default:
                return FileIcon;
        }
    };
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formatFileSize = (bytes: number): string => {
        if (!bytes || bytes === 0) return '0 B';
        
        if (bytes < 1024) {
            return bytes + ' B';
        } else if (bytes < 1024 * 1024) {
            return (bytes / 1024).toFixed(1) + ' KB';
        } else {
            return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
        }
    };
    
    // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ component ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    return {
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
        data,
        existingAttachments,
        selectedFiles,
        fileNames,
        attachmentsToDelete,
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
        loadData,
        loadAttachments,
        submitForm,
        deleteRisk,
        bulkDeleteRisks,
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
        resetAttachmentState,
        addSelectedFiles,
        removeSelectedFile,
        markAttachmentForDeletion,
        openAttachment,
        validateFiles,
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ UI
        getFileIcon,
        formatFileSize
    };
}
